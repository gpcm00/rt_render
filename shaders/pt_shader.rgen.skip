#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable

#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference_uvec2 : enable
#extension GL_EXT_scalar_block_layout : enable

#extension GL_ARB_shading_language_include : enable

#include "common.glsl"
#include "pbr.glsl"
layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
// Change format and image setup code if needed
layout(binding = 1, set = 0, rgba8) uniform image2D image;

// Be wary of alignment
layout(std140, binding = 2, set = 0) uniform Camera {
    vec4 position;
    vec4 direction;
    vec4 up;
    vec4 right;
    float fov;
    float rmin;
    float rmax;
    float aspect_ratio;
}
camera;

layout(location = 0) rayPayloadEXT RayPayload payload;

struct Ray {
    vec3 origin;
    vec3 direction;
};

Ray compute_perspective_ray(vec2 uv, vec3 position, vec3 direction, vec3 up,
                            vec3 right, float fov, float aspect_ratio) {
    float scale = tan(fov * 0.5);
    vec3 ray_direction = normalize((uv.x - 0.5) * aspect_ratio * scale * right -
                                   (uv.y - 0.5) * scale * up + direction);

    return Ray(position, ray_direction);
}

void main() {

    uvec2 pixel = gl_LaunchIDEXT.xy;
    uvec2 resolution = gl_LaunchSizeEXT.xy;

    vec2 uv = (vec2(pixel) + 0.5) / vec2(resolution);

    Ray ray = compute_perspective_ray(
        uv, camera.position.xyz, camera.direction.xyz, camera.up.xyz,
        camera.right.xyz, camera.fov, camera.aspect_ratio);

    vec4 final_color = vec4(0.0);
    int n_samples = 1;
    for (int i = 0; i < n_samples; i++) {
        payload.rayOrigin = ray.origin;
        payload.rayDirection = ray.direction;
        payload.level = 0;
        payload.missed = false;
        payload.index = i;
        payload.contribution = vec4(1.0);
        payload.color = vec4(0.0);
        payload.light_ray = false;
        vec4 pixelColor = vec4(0.0);
        const int maxLevel = 1;
        int level = 0;
        vec4 contribution = vec4(1.0);

        while (length(payload.rayDirection) > 0.1 && level < maxLevel &&
               length(contribution) > 0.001) {
            payload.level = level;
            payload.missed = false;
            traceRayEXT(topLevelAS, gl_RayFlagsNoneEXT,
                        0xFF,                 // mask
                        0,                    // sbt offset
                        0,                    // sbt stride
                        0,                    // miss index
                        payload.rayOrigin,    // ray origin
                        camera.rmin,          // ray min
                        payload.rayDirection, // ray direction,
                        camera.rmax,          // ray max
                        0                     // ray payload
            );
            pixelColor += payload.color;
            contribution *= payload.contribution;
            level++;
        }
        final_color += pixelColor;
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy),
               clamp(final_color / float(n_samples), 0.0, 1.0));
}

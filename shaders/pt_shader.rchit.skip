// #version 460
// #extension GL_EXT_ray_tracing : require
// #extension GL_EXT_nonuniform_qualifier : enable

// #extension GL_EXT_buffer_reference : require
// #extension GL_EXT_buffer_reference_uvec2 : enable
// #extension GL_EXT_scalar_block_layout : enable

// #extension GL_ARB_shading_language_include : enable

// #include "common.glsl"
// #include "pbr.glsl"


// struct Vertex {
//     vec3 position;
//     float padding0;
//     vec3 normal;
//     float padding1;
//     vec3 color;
//     float padding2;
//     vec2 uvmap;
//     vec2 padding3;
// };

// layout(std140, binding = 2, set = 0) uniform Camera {
//     vec4 position;
//     vec4 direction;
//     vec4 up;
//     vec4 right;
//     float fov;
//     float rmin;
//     float rmax;
//     float aspect_ratio;
    
// } camera;

// layout(buffer_reference, scalar) buffer VertexBuffer {
//     Vertex vertices[];
// };

// layout(buffer_reference, scalar) buffer IndexBuffer {
//     uint indices[];
// };

// struct Material {
//     float transmission;
// };

// struct Mesh {
//     VertexBuffer vertex;
//     IndexBuffer index;
//     uint material_id;
// };

// layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;

// layout(scalar, set = 0, binding = 3) buffer Meshes {
//   Mesh meshes[];
// };

// struct Instance {
//     uint mesh_id;
// };

// layout(scalar, set = 0, binding = 4) buffer Instances {
//     Instance instances[];
// };

// layout(scalar, set = 0, binding = 5) buffer Materials {
//     Material materials[];
// };

// layout(set = 0, binding = 6) uniform sampler2D base_color_tex[];
// layout(set = 0, binding = 7) uniform sampler2D normal_tex[];
// layout(set = 0, binding = 8) uniform sampler2D metalness_roughness_tex[];
// layout(set = 0, binding = 9) uniform sampler2D emissive_tex[];



// layout(location = 0) rayPayloadInEXT RayPayload payload;
// layout(location = 1) rayPayloadInEXT bool isShadowed;
// hitAttributeEXT vec2 bary;
// void main()
// {
//   uint mesh_id = instances[gl_InstanceCustomIndexEXT].mesh_id;
//   Mesh mesh = meshes[mesh_id];

//   // Retrieve the indices of the triangle
//   uint tri = gl_PrimitiveID;

//   uint i0 = mesh.index.indices[tri*3];
//   uint i1 = mesh.index.indices[tri*3 + 1];
//   uint i2 = mesh.index.indices[tri*3 + 2];

//   // Retrieve the vertices of the triangle
//   Vertex v0 = mesh.vertex.vertices[i0];
//   Vertex v1 = mesh.vertex.vertices[i1];
//   Vertex v2 = mesh.vertex.vertices[i2];

//   vec3 weights = vec3(1.0f - bary.x - bary.y, bary.x, bary.y);

//   vec3 local_normal = normalize(
//       v0.normal * weights.x +
//       v1.normal * weights.y +
//       v2.normal * weights.z
//   );

//   vec3 local_position = (
//       v0.position * weights.x +
//       v1.position * weights.y +
//       v2.position * weights.z
//   );

//   vec3 object_color = (
//       v0.color * weights.x +
//       v1.color * weights.y +
//       v2.color * weights.z
//   );

//   vec2 uv = (
//       v0.uvmap * weights.x +
//       v1.uvmap * weights.y +
//       v2.uvmap * weights.z
//   );

//   // Adapted from https://stackoverflow.com/questions/35723318/getting-the-tangent-for-a-object-space-to-texture-space
//   // and https://learnopengl.com/Advanced-Lighting/Normal-Mapping
//   vec3 delta_v1 = v1.position-v0.position;
//   vec3 delta_v2 = v2.position-v0.position;
  
//   vec2  delta_uv1 = v1.uvmap-v0.uvmap;
//   vec2  delta_uv2 = v2.uvmap-v0.uvmap;
//   float r = 1.0f / (delta_uv1.x * delta_uv2.y - delta_uv1.y * delta_uv2.x);
//   vec3  local_tangent = (delta_v1*delta_uv2.y - delta_v2 * delta_uv1.y) * r;

//   vec3 position = vec3(gl_ObjectToWorldEXT * vec4(local_position, 1.0));
//   vec3 normal = normalize(vec3(mat3(gl_WorldToObjectEXT) * local_normal));
//   vec3 tangent = normalize(vec3(mat3(gl_WorldToObjectEXT) * local_tangent));
//   vec3 bitangent = normalize(cross(normal, tangent)); // missing tangent.w
//   mat3 normal_matrix = mat3(tangent, bitangent, normal);

//   vec3 light_pos = vec3(0.05, 0.5, 0.05);
//   vec3 light_dir = normalize(light_pos - position);
//   vec3 light_color = 8.0* vec3(1.0, 1.0, 1.0);
//   float ndl = max(dot(normal, light_dir), 0.0);
//   vec3 lighting = ndl * light_color;
//   uint texture_id = mesh.material_id;
//   vec3 base_color = texture(nonuniformEXT(base_color_tex[texture_id]), uv).xyz;
//   vec3 normal_map = texture(nonuniformEXT(normal_tex[texture_id]), uv).xyz;
//   normal = normalize(normal_matrix * (normal_map * 2.0 - 1.0));
//   // metalness should be B channel and roughness should be G channel
//   // https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#_material_pbrmetallicroughness_metallicroughnesstexture
//   vec3 metalness_roughness = texture(nonuniformEXT(metalness_roughness_tex[texture_id]), uv).rgb;
//   float metalness = metalness_roughness.b;
//   float roughness = metalness_roughness.g;

//   vec3 emissive = texture(nonuniformEXT(emissive_tex[texture_id]), uv).xyz;

//   object_color =  base_color;

//   float light_distance = length(light_pos - position);
//   float attenuation = 1 / (light_distance * light_distance);
//   float reflectance = 0.5f;
//   vec3 f0 = 0.16 * reflectance * reflectance * (1.0 - metalness) + base_color * metalness;
//   vec3 view = normalize(reflect(-gl_WorldRayDirectionEXT, normal)); //normalize(camera.position.xyz - position);

//   // vec3 rayShadowOrigin = gl_WorldRayOriginEXT + gl_WorldRayDirectionEXT * gl_HitTEXT + normal;
//   vec3 hitPosition = gl_WorldRayOriginEXT + gl_WorldRayDirectionEXT * gl_HitTEXT;
//   vec3 rayDir = reflect(-gl_WorldRayDirectionEXT, normal);
//   vec3 lightDir = normalize(lightpos - hitPosition);
//   float frontFacing = dot(-gl_WorldRayDirectionEXT, normal);
//   vec3 shadowRayOrigin = position + sign(frontFacing) * normal * 0.02;
//   float lightDistance = length(light_pos - hitPosition);
//   payload.missed = false;
//   traceRayEXT(
//       topLevelAS,           
//       gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT | gl_RayFlagsCullBackFacingTrianglesEXT, 
//       0xFF,                  
//       0,                      
//       0,                     
//       0,                      
//       shadowRayOrigin,       
//       0.001,                 
//       rayDir,              
//       lightDistance - 0.002,  
//       0                      
//   );
  

//   vec3 color = emissive;
//   // if (payload.missed == true) {
//   //   color += vec3(0.0, 1.0, 0.0); // BRDF_Filament(normal, light_dir, view, roughness, metalness, f0, base_color, light_color);
//   // }
//   color += BRDF_Filament(normal, light_dir, view, roughness, metalness, f0, base_color, light_color);

//   // if(payload.level > 0) {
//   //   color = clamp(color, 0.0, 0.01);
//   // }

//   vec3 random = random_pcg3d(uvec3(gl_LaunchIDEXT.xy, pow(gl_PrimitiveID ^ gl_InstanceCustomIndexEXT, payload.level+payload.index+3) ));
//   float e0 = random.x;
//   float e1 = random.y;
//   float a = roughness * roughness;
//   float a2 = a*a;
//   float theta = acos(sqrt((1.0 - e0) / ((a2 - 1.0) * e0 + 1.0)));
//   float phi = 2*PI * e1;
//   vec2 xi = vec2(phi, theta);
//   vec3 contribution = vec3(0.0);
//   vec3 rayDirection = importanceSampleGGX(normal, payload.rayDirection, roughness, xi, f0, contribution);
//   payload.color = vec4(color, 1.0);
//   payload.contribution = vec4(normalize(contribution), 1.0);
//   payload.rayOrigin = position;
//   payload.rayDirection = rayDirection;
//   payload.missed = false;
// }

#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable

#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference_uvec2 : enable
#extension GL_EXT_scalar_block_layout : enable

#extension GL_ARB_shading_language_include : enable

#include "common.glsl"
#include "pbr.glsl"

// A vertex structure with padding for std140 layout.
struct Vertex {
    vec3 position;
    float padding0;
    vec3 normal;
    float padding1;
    vec3 color;
    float padding2;
    vec2 uvmap;
    vec2 padding3;
};

layout(std140, binding = 2, set = 0) uniform Camera {
    vec4 position;
    vec4 direction;
    vec4 up;
    vec4 right;
    float fov;
    float rmin;
    float rmax;
    float aspect_ratio;
} camera;

// Buffer definitions (vertex, index, mesh, instances, materials)
layout(buffer_reference, scalar) buffer VertexBuffer {
    Vertex vertices[];
};

layout(buffer_reference, scalar) buffer IndexBuffer {
    uint indices[];
};

struct Material {
    float transmission;
};

struct Mesh {
    VertexBuffer vertex;
    IndexBuffer index;
    uint material_id;
};

layout(scalar, set = 0, binding = 3) buffer Meshes {
    Mesh meshes[];
};

struct Instance {
    uint mesh_id;
};

layout(scalar, set = 0, binding = 4) buffer Instances {
    Instance instances[];
};

layout(scalar, set = 0, binding = 5) buffer Materials {
    Material materials[];
};

// Texture arrays for base color, normal map, metalness/roughness, and emissive maps.
layout(set = 0, binding = 6) uniform sampler2D base_color_tex[];
layout(set = 0, binding = 7) uniform sampler2D normal_tex[];
layout(set = 0, binding = 8) uniform sampler2D metalness_roughness_tex[];
layout(set = 0, binding = 9) uniform sampler2D emissive_tex[];

// The top-level acceleration structure.
layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;

// Ray payloads and hit attribute.
layout(location = 0) rayPayloadInEXT RayPayload payload;
layout(location = 1) rayPayloadInEXT bool isShadowed;
hitAttributeEXT vec2 bary;

void main()
{
    // Get mesh index from the instance.
    uint mesh_id = instances[gl_InstanceCustomIndexEXT].mesh_id;
    Mesh mesh = meshes[mesh_id];

    // Get triangle indices from gl_PrimitiveID.
    uint tri = gl_PrimitiveID;
    uint i0 = mesh.index.indices[tri * 3];
    uint i1 = mesh.index.indices[tri * 3 + 1];
    uint i2 = mesh.index.indices[tri * 3 + 2];

    // Retrieve vertices.
    Vertex v0 = mesh.vertex.vertices[i0];
    Vertex v1 = mesh.vertex.vertices[i1];
    Vertex v2 = mesh.vertex.vertices[i2];

    // Interpolate attributes in object space using barycentrics.
    vec3 weights = vec3(1.0 - bary.x - bary.y, bary.x, bary.y);
    vec3 local_position = v0.position * weights.x +
                          v1.position * weights.y +
                          v2.position * weights.z;
    vec3 local_normal = normalize(v0.normal * weights.x +
                                  v1.normal * weights.y +
                                  v2.normal * weights.z);
    vec3 object_color = v0.color * weights.x +
                        v1.color * weights.y +
                        v2.color * weights.z;
    vec2 uv = v0.uvmap * weights.x +
              v1.uvmap * weights.y +
              v2.uvmap * weights.z;

    // Compute tangent from positions and UVs.
    vec3 delta_v1 = v1.position - v0.position;
    vec3 delta_v2 = v2.position - v0.position;
    vec2 delta_uv1 = v1.uvmap - v0.uvmap;
    vec2 delta_uv2 = v2.uvmap - v0.uvmap;
    float r = 1.0 / (delta_uv1.x * delta_uv2.y - delta_uv1.y * delta_uv2.x);
    vec3 local_tangent = (delta_v1 * delta_uv2.y - delta_v2 * delta_uv1.y) * r;

    // Transform from object space to world space using gl_ObjectToWorldEXT.
    vec3 position = vec3(gl_ObjectToWorldEXT * vec4(local_position, 1.0));
    vec3 world_normal = normalize(mat3(gl_ObjectToWorldEXT) * local_normal);
    vec3 world_tangent = normalize(mat3(gl_ObjectToWorldEXT) * local_tangent);
    vec3 world_bitangent = normalize(cross(world_normal, world_tangent));
    // Build a tangent-space matrix.
    mat3 normal_matrix = mat3(world_tangent, world_bitangent, world_normal);

    // Sample material textures.
    uint texture_id = mesh.material_id;
    vec3 base_color = texture(nonuniformEXT(base_color_tex[texture_id]), uv).xyz;
    vec3 normal_map = texture(nonuniformEXT(normal_tex[texture_id]), uv).xyz;
    // Transform normal map from tangent to world space.
    world_normal = normalize(normal_matrix * (normal_map * 2.0 - 1.0));

    // Metalness (B channel) and roughness (G channel).
    vec3 mr = texture(nonuniformEXT(metalness_roughness_tex[texture_id]), uv).rgb;
    float metalness = mr.b;
    float roughness = mr.g;

    vec3 emissive = texture(nonuniformEXT(emissive_tex[texture_id]), uv).xyz;
    object_color = base_color; // Overwrite object color if needed.

    // Setup a simple point light.
    vec3 lightPos = vec3(0.05, 0.5, 0.05);
    vec3 lightDir = normalize(lightPos - position);
    vec3 lightColor = 8.0 * vec3(1.0);
    float ndl = max(dot(world_normal, lightDir), 0.0);
    vec3 diffuse_lighting = ndl * lightColor;

    // Compute BRDF parameters (using a function from pbr.glsl).
    float reflectance = 0.5;
    vec3 f0 = 0.16 * reflectance * reflectance * (1.0 - metalness) + base_color * metalness;
    // Compute view direction from camera position.
    vec3 viewDir = normalize(camera.position.xyz - position);

    // --- Shadow Ray ---
    // Calculate the hit position in world space.
    vec3 hitPosition = gl_WorldRayOriginEXT + gl_WorldRayDirectionEXT * gl_HitTEXT;
    // For shadow rays, we want to trace toward the light.
    vec3 shadowLightDir = normalize(lightPos - hitPosition);
    // Offset the ray origin slightly along the normal to avoid self-intersection.
    float frontFacing = dot(-gl_WorldRayDirectionEXT, world_normal);
    vec3 shadowRayOrigin = position + sign(frontFacing) * world_normal * 0.02;
    // Compute the maximum distance the shadow ray should travel.
    float shadow_tmax = length(lightPos - hitPosition);

    // Set the payload flag to not missed.
    payload.missed = false;
    // Trace the shadow ray. (This assumes the shadow hit group sets payload.missed = true on miss.)
    traceRayEXT(
        topLevelAS,
        gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT | gl_RayFlagsCullBackFacingTrianglesEXT,
        0xFF,
        0,
        0,
        0,
        shadowRayOrigin,
        0.001,
        shadowLightDir,
        shadow_tmax - 0.002,
        0
    );
  
    // Compute final shading using the BRDF.
    vec3 color = emissive + BRDF_Filament(world_normal, lightDir, viewDir, roughness, metalness, f0, base_color, lightColor);
  
    // Optionally, modify the shading based on the shadow test:
    // (For example, if payload.missed is false, then the ray was occluded and you may darken the result.)
    if (!payload.missed) {
        // Here you might reduce the light contribution.
        color = vec3(1.0, 0.0, 0.0);
    } else {
        color = vec3(1.0, 1.0, 0.0);
    }

    // Reflection sampling (using importanceSampleGGX from pbr.glsl).
    // Here, random sampling and BRDF importance sampling are used to compute a reflection ray.
    vec3 randomVec = random_pcg3d(uvec3(gl_LaunchIDEXT.xy, uint(pow(gl_PrimitiveID ^ gl_InstanceCustomIndexEXT, payload.level + payload.index + 3))));
    float e0 = randomVec.x;
    float e1 = randomVec.y;
    float a = roughness * roughness;
    float a2 = a * a;
    float theta = acos(sqrt((1.0 - e0) / ((a2 - 1.0) * e0 + 1.0)));
    float phi = 2.0 * PI * e1;
    vec2 xi = vec2(phi, theta);
    vec3 contribution = vec3(0.0);
    // importanceSampleGGX should return the new ray direction for reflection.
    vec3 newRayDir = importanceSampleGGX(world_normal, payload.rayDirection, roughness, xi, f0, contribution);

    // Set payload values for further recursive ray tracing.
    payload.color = vec4(color, 1.0);
    payload.contribution = vec4(normalize(contribution), 1.0);
    payload.rayOrigin = position;
    payload.rayDirection = normalize(newRayDir);
    payload.missed = false;
}
